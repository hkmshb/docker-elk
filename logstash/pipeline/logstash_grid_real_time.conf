input {
  jdbc {
    jdbc_driver_library => "/usr/share/java/postgresql-42.1.4.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "${JDBC_STRING}"
    jdbc_user => "${PSQL_USER}"
    jdbc_password => "${PSQL_PASSWORD}"
    #schedule => "*/10 * * * *"
    schedule => "*/3 * * * *"
    statement_filepath => "/usr/share/logstash/sql/grid_real_time.sql"
    clean_run => false
    tracking_column => "created"
    tracking_column_type => "timestamp"
    record_last_run => true
    use_column_value => true
    jdbc_validate_connection => true
    type => "grid_real_time"
  }
}

## Add your filters / logstash plugins configuration here grid_real_time.sql
filter{
  if [type] == "grid_real_time" {
    date {
      match => [ "created" , "yyyy-MM-DD'T'HH:mm:ss.SSSSSSZ" ]
      timezone => "Africa/Lagos"
    }
  }
}

filter{
  if [type] == "grid_real_time" {
    mutate {
      add_field => ["location", "%{latitude}, %{longitude}"]
    }
    mutate {
      rename => {"statename" => "State Name"}
      rename => {"lganame" => "LGA Name"}
      rename => {"wardname" => "Ward Name"}
    }
    if[poi_type] != [null]{
      mutate {
        rename => {"poi_name" => "poi_name2"}
        add_field => ["POI Name","%{poi_type}"]
      }
    }
  }
}

filter {
  if [type] == "grid_real_time" {
    if [poi_type] !=[null] {
      translate {
        field => "POI Name"
        exact => false
        dictionary_path => "/usr/share/logstash/dictionary/grid_poi_type_dictionary.yml"
        override => true
        destination => "POI Name"
      }
    }
  }
}

output {
  stdout { codec => rubydebug }
  if [type] == "grid_real_time" {
    elasticsearch {
      index => "grid_real_time"
      document_type => "grid_real_time"
      document_id => "%{instanceid}"
      manage_template => true
      template => "/usr/share/logstash/mapping/grid_real_time.json"
      template_name => "grid_real_time"
      template_overwrite => true
      #hosts => ["proxy:9200"]
      hosts => ["elasticsearch:9200"]
    }
  }
}
